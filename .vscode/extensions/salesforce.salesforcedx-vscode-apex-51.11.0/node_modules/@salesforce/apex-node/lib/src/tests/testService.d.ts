import { Connection } from '@salesforce/core';
import { SyncTestConfiguration, SyncTestResult, AsyncTestConfiguration, AsyncTestArrayConfiguration, ApexTestProgressValue, ApexTestResult, ApexTestQueueItem, TestResult, OutputDirConfig, TestLevel } from './types';
import { CancellationToken, Progress } from '../common';
export declare class TestService {
    readonly connection: Connection;
    private readonly codecoverage;
    constructor(connection: Connection);
    buildSyncPayload(testLevel: TestLevel, tests?: string, classnames?: string): Promise<SyncTestConfiguration>;
    buildAsyncPayload(testLevel: TestLevel, tests?: string, classNames?: string, suiteNames?: string): Promise<AsyncTestConfiguration | AsyncTestArrayConfiguration>;
    private buildTestPayload;
    private buildAsyncClassPayload;
    /**
     * Synchronous Test Runs
     * @param options Synchronous Test Runs configuration
     * @param codeCoverage should report code coverage
     * @param token cancellation token
     */
    runTestSynchronous(options: SyncTestConfiguration, codeCoverage?: boolean, token?: CancellationToken): Promise<TestResult>;
    formatSyncResults(apiTestResult: SyncTestResult, startTime: number, codeCoverage?: boolean): Promise<TestResult>;
    private buildSyncTestResults;
    /**
     * Asynchronous Test Runs
     * @param options test options
     * @param codeCoverage should report code coverage
     * @param progress progress reporter
     * @param token cancellation token
     */
    runTestAsynchronous(options: AsyncTestConfiguration | AsyncTestArrayConfiguration, codeCoverage?: boolean, progress?: Progress<ApexTestProgressValue>, token?: CancellationToken): Promise<TestResult>;
    /**
     * Report Asynchronous Test Run Results
     * @param testRunId test run id
     * @param codeCoverage should report code coverages
     * @param token cancellation token
     */
    reportAsyncResults(testRunId: string, codeCoverage?: boolean, token?: CancellationToken): Promise<TestResult>;
    formatAsyncResults(testQueueResult: ApexTestQueueItem, testRunId: string, commandStartTime: number, codeCoverage?: boolean, progress?: Progress<ApexTestProgressValue>): Promise<TestResult>;
    getAsyncTestResults(testQueueResult: ApexTestQueueItem): Promise<ApexTestResult[]>;
    private buildAsyncTestResults;
    writeResultFiles(result: TestResult, outputDirConfig: OutputDirConfig, codeCoverage?: boolean): Promise<string[]>;
    /**
     * Abort test run with test run id
     * @param testRunId
     */
    abortTestRun(testRunId: string, progress?: Progress<ApexTestProgressValue>): Promise<void>;
    private getTestRunRequestAction;
}
