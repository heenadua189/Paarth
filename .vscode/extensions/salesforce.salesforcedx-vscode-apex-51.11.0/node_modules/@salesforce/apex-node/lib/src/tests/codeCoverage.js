"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const utils_1 = require("./utils");
class CodeCoverage {
    constructor(connection) {
        this.connection = connection;
    }
    /**
     * Returns the string representation of the org wide coverage percentage for a given username connection from OrgWideCoverage entity
     * @returns Org wide coverage percentage for a given username connection
     */
    getOrgWideCoverage() {
        return __awaiter(this, void 0, void 0, function* () {
            const orgWideCoverageResult = (yield this.connection.tooling.query('SELECT PercentCovered FROM ApexOrgWideCoverage'));
            if (orgWideCoverageResult.records.length === 0) {
                return '0%';
            }
            return `${orgWideCoverageResult.records[0].PercentCovered}%`;
        });
    }
    /**
     * Returns the code coverage information for each Apex class covered by each Apex test method from ApexCodeCoverage entity
     * @param apexTestClassSet Set of Apex test classes
     * @returns The code coverage information associated with each Apex test class
     * NOTE: a test could cover more than one class, result map should contain a record for each covered class
     */
    getPerClassCodeCoverage(apexTestClassSet) {
        return __awaiter(this, void 0, void 0, function* () {
            if (apexTestClassSet.size === 0) {
                return new Map();
            }
            const perClassCodeCovResuls = yield this.queryPerClassCodeCov(apexTestClassSet);
            const perClassCoverageMap = new Map();
            perClassCodeCovResuls.records.forEach(item => {
                const totalLines = item.NumLinesCovered + item.NumLinesUncovered;
                const percentage = utils_1.calculatePercentage(item.NumLinesCovered, totalLines);
                const value = Object.assign({ apexClassOrTriggerName: item.ApexClassOrTrigger.Name, apexClassOrTriggerId: item.ApexClassOrTrigger.Id, apexTestClassId: item.ApexTestClassId, apexTestMethodName: item.TestMethodName, numLinesCovered: item.NumLinesCovered, numLinesUncovered: item.NumLinesUncovered, percentage }, (item.Coverage ? { coverage: item.Coverage } : {}));
                const key = `${item.ApexTestClassId}-${item.TestMethodName}`;
                if (perClassCoverageMap.get(key)) {
                    perClassCoverageMap.get(key).push(value);
                }
                else {
                    perClassCoverageMap.set(`${item.ApexTestClassId}-${item.TestMethodName}`, [value]);
                }
            });
            return perClassCoverageMap;
        });
    }
    queryPerClassCodeCov(apexTestClassSet) {
        return __awaiter(this, void 0, void 0, function* () {
            let str = '';
            apexTestClassSet.forEach(elem => {
                str += `'${elem}',`;
            });
            str = str.slice(0, -1);
            const perClassCodeCovQuery = 'SELECT ApexTestClassId, ApexClassOrTrigger.Id, ApexClassOrTrigger.Name, TestMethodName, NumLinesCovered, NumLinesUncovered, Coverage FROM ApexCodeCoverage WHERE ApexTestClassId IN (%s)';
            const perClassCodeCovResuls = (yield this.connection.tooling.query(util.format(perClassCodeCovQuery, `${str}`)));
            return perClassCodeCovResuls;
        });
    }
    /**
     * Returns the aggregate code coverage information from ApexCodeCoverageAggregate entity for a given set of Apex classes
     * @param apexClassIdSet Set of ids for Apex classes
     * @returns The aggregate code coverage information for the given set of Apex classes
     */
    getAggregateCodeCoverage(apexClassIdSet) {
        return __awaiter(this, void 0, void 0, function* () {
            if (apexClassIdSet.size === 0) {
                return { codeCoverageResults: [], totalLines: 0, coveredLines: 0 };
            }
            const codeCoverageResuls = yield this.queryAggregateCodeCov(apexClassIdSet);
            let totalLinesCovered = 0;
            let totalLinesUncovered = 0;
            const codeCoverageResults = codeCoverageResuls.records.map(item => {
                totalLinesCovered += item.NumLinesCovered;
                totalLinesUncovered += item.NumLinesUncovered;
                const totalLines = item.NumLinesCovered + item.NumLinesUncovered;
                const percentage = utils_1.calculatePercentage(item.NumLinesCovered, totalLines);
                return {
                    apexId: item.ApexClassOrTrigger.Id,
                    name: item.ApexClassOrTrigger.Name,
                    type: item.ApexClassOrTrigger.Id.startsWith('01p')
                        ? 'ApexClass'
                        : 'ApexTrigger',
                    numLinesCovered: item.NumLinesCovered,
                    numLinesUncovered: item.NumLinesUncovered,
                    percentage,
                    coveredLines: item.Coverage.coveredLines,
                    uncoveredLines: item.Coverage.uncoveredLines
                };
            });
            return {
                codeCoverageResults,
                totalLines: totalLinesCovered + totalLinesUncovered,
                coveredLines: totalLinesCovered
            };
        });
    }
    queryAggregateCodeCov(apexClassIdSet) {
        return __awaiter(this, void 0, void 0, function* () {
            let str = '';
            apexClassIdSet.forEach(elem => {
                str += `'${elem}',`;
            });
            str = str.slice(0, -1);
            const codeCoverageQuery = 'SELECT ApexClassOrTrigger.Id, ApexClassOrTrigger.Name, NumLinesCovered, NumLinesUncovered, Coverage FROM ApexCodeCoverageAggregate WHERE ApexClassorTriggerId IN (%s)';
            const codeCoverageResuls = (yield this.connection.tooling.query(util.format(codeCoverageQuery, `${str}`)));
            return codeCoverageResuls;
        });
    }
}
exports.CodeCoverage = CodeCoverage;
//# sourceMappingURL=codeCoverage.js.map