"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
/**
 * Get the file or directory name at the end of a path. Different from `path.basename`
 * in that it strips anything after the first '.' in the name.
 * @param fsPath The path to evaluate
 */
function baseName(fsPath) {
    return path_1.basename(fsPath).split('.')[0];
}
exports.baseName = baseName;
/**
 * Get the name of file path extension. Different from path.extname in that it
 * does not include the '.' in the extension name. Returns an empty string if
 * there is no extension.
 * @param fsPath The path to evaluate
 */
function extName(fsPath) {
    const split = path_1.extname(fsPath).split('.');
    return split.length > 1 ? split[1] : split[0];
}
exports.extName = extName;
/**
 * Get the name of the parent to the last portion of a path
 * @param fsPath The path to evaluate
 */
function parentName(fsPath) {
    return path_1.basename(path_1.dirname(fsPath));
}
exports.parentName = parentName;
/**
 * Trim a path up until and including the given part. Returns `fsPath`
 * if the path `part` was not found.
 * @param fsPath Path to trim
 * @param part Path part to trim up until
 */
function trimUntil(fsPath, part) {
    const parts = fsPath.split(path_1.sep);
    const partIndex = parts.findIndex((p) => part === p);
    if (partIndex === -1) {
        return fsPath;
    }
    return parts.slice(partIndex).join(path_1.sep);
}
exports.trimUntil = trimUntil;
//# sourceMappingURL=path.js.map