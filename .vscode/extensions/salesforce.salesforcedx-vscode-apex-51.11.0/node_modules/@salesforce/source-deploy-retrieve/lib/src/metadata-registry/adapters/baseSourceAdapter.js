"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const registry_1 = require("../../utils/registry");
const errors_1 = require("../../errors");
const path_1 = require("../../utils/path");
const forceIgnore_1 = require("../forceIgnore");
const path_2 = require("path");
const treeContainers_1 = require("../treeContainers");
const sourceComponent_1 = require("../sourceComponent");
const registryAccess_1 = require("../registryAccess");
class BaseSourceAdapter {
    constructor(type, registry = new registryAccess_1.RegistryAccess(), forceIgnore = new forceIgnore_1.ForceIgnore(), tree = new treeContainers_1.NodeFSTreeContainer()) {
        /**
         * Whether or not an adapter should expect a component to be in its own, self-named
         * folder, including its root metadata xml file.
         */
        this.ownFolder = false;
        this.metadataWithContent = true;
        this.type = type;
        this.registry = registry;
        this.forceIgnore = forceIgnore;
        this.tree = tree;
    }
    getComponent(path, isResolvingSource = true) {
        let rootMetadata = this.parseAsRootMetadataXml(path);
        if (!rootMetadata) {
            const rootMetadataPath = this.getRootMetadataXmlPath(path);
            if (rootMetadataPath) {
                rootMetadata = registry_1.parseMetadataXml(rootMetadataPath);
            }
        }
        if (rootMetadata && this.forceIgnore.denies(rootMetadata.path)) {
            throw new errors_1.UnexpectedForceIgnore('error_no_metadata_xml_ignore', [rootMetadata.path, path]);
        }
        let component;
        if (rootMetadata) {
            const componentName = this.type.inFolder
                ? `${path_1.parentName(rootMetadata.path)}/${rootMetadata.fullName}`
                : rootMetadata.fullName;
            component = new sourceComponent_1.SourceComponent({
                name: componentName,
                type: this.type,
                xml: rootMetadata.path,
            }, this.tree, this.forceIgnore);
        }
        return this.populate(path, component, isResolvingSource);
    }
    /**
     * Control whether metadata and content metadata files are allowed for an adapter.
     */
    allowMetadataWithContent() {
        return this.metadataWithContent;
    }
    /**
     * If the path given to `getComponent` is the root metadata xml file for a component,
     * parse the name and return it. This is an optimization to not make a child adapter do
     * anymore work to find it.
     *
     * @param path File path of a metadata component
     */
    parseAsRootMetadataXml(path) {
        const metaXml = registry_1.parseMetadataXml(path);
        if (metaXml) {
            let isRootMetadataXml = false;
            if (this.type.strictDirectoryName) {
                const parentPath = path_2.dirname(path);
                const typeDirName = path_2.basename(this.type.inFolder ? path_2.dirname(parentPath) : parentPath);
                const nameMatchesParent = path_2.basename(parentPath) === metaXml.fullName;
                const inTypeDir = typeDirName === this.type.directoryName;
                // if the parent folder name matches the fullName OR parent folder name is
                // metadata type's directory name, it's a root metadata xml.
                isRootMetadataXml = nameMatchesParent || inTypeDir;
            }
            else {
                isRootMetadataXml = true;
            }
            return isRootMetadataXml ? metaXml : undefined;
        }
        const folderMetadataXml = this.parseAsFolderMetadataXml(path);
        if (folderMetadataXml) {
            return folderMetadataXml;
        }
        if (!this.allowMetadataWithContent()) {
            return this.parseAsContentMetadataXml(path);
        }
    }
    /**
     * If the path given to `getComponent` serves as the sole definition (metadata and content)
     * for a component, parse the name and return it. This allows matching files in metadata
     * format such as:
     *
     *   .../tabs/MyTab.tab
     *
     * @param path File path of a metadata component
     */
    parseAsContentMetadataXml(path) {
        const parentPath = path_2.dirname(path);
        const parts = parentPath.split(path_2.sep);
        const typeFolderIndex = parts.lastIndexOf(this.type.directoryName);
        const allowedIndex = this.type.inFolder ? parts.length - 2 : parts.length - 1;
        if (typeFolderIndex !== allowedIndex) {
            return undefined;
        }
        const match = path_2.basename(path).match(/(.+)\.(.+)/);
        if (match && this.type.suffix === match[2]) {
            return { fullName: match[1], suffix: match[2], path: path };
        }
    }
    parseAsFolderMetadataXml(fsPath) {
        const match = path_2.basename(fsPath).match(/(.+)-meta\.xml$/);
        const parts = fsPath.split(path_2.sep);
        if (match && !match[1].includes('.') && parts.length > 1) {
            return { fullName: match[1], suffix: undefined, path: fsPath };
        }
    }
}
exports.BaseSourceAdapter = BaseSourceAdapter;
//# sourceMappingURL=baseSourceAdapter.js.map