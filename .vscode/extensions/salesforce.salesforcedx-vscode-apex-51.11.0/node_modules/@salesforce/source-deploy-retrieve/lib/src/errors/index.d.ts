import { MetadataType, SourcePath } from '../common';
export declare class LibraryError extends Error {
    constructor(messageKey: string, args?: string | string[]);
}
export declare class RegistryError extends LibraryError {
    constructor(messageKey: string, args?: string | string[]);
}
export declare class TypeInferenceError extends RegistryError {
    constructor(messageKey: string, args?: string | string[]);
}
export declare class ExpectedSourceFilesError extends RegistryError {
    constructor(type: MetadataType, originalPath: SourcePath, messageKey?: string);
}
export declare class UnexpectedForceIgnore extends RegistryError {
    constructor(messageKey: string, args?: string | string[]);
}
export declare class SourceClientError extends LibraryError {
    constructor(messageKey: string, args?: string | string[]);
}
export declare class DeployError extends SourceClientError {
    constructor(messageKey: string, args?: string | string[]);
}
export declare class RetrieveError extends SourceClientError {
    constructor(messageKey: string, args?: string | string[]);
}
/**
 * A wrapper for any errors thrown in the conversion pipeline
 */
export declare class ConversionError extends LibraryError {
    constructor(originalError: Error);
}
export declare class ComponentSetError extends LibraryError {
    constructor(messageKey: string, args?: string | string[]);
}
