"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const streams_1 = require("./streams");
class ConvertTransactionFinalizer {
    setState(props) {
        props(this._state);
    }
    get state() {
        return this._state;
    }
}
/**
 * Merges child components that share the same parent in the conversion pipeline
 * into a single file.
 */
class RecompositionFinalizer extends ConvertTransactionFinalizer {
    constructor() {
        super(...arguments);
        this._state = {};
    }
    finalize() {
        return __awaiter(this, void 0, void 0, function* () {
            const writerData = [];
            for (const { component: parent, children } of Object.values(this.state)) {
                const baseObject = yield parent.parseXml();
                const recomposedXmlObj = yield this.recompose(children, baseObject);
                writerData.push({
                    component: parent,
                    writeInfos: [
                        {
                            source: new streams_1.JsToXml(recomposedXmlObj),
                            output: path_1.join(parent.type.directoryName, `${parent.fullName}.${parent.type.suffix}`),
                        },
                    ],
                });
            }
            return writerData;
        });
    }
    recompose(children, baseXmlObj) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const child of children) {
                const { directoryName: groupNode } = child.type;
                const { name: parentName } = child.parent.type;
                const xmlObj = yield child.parseXml();
                const childContents = xmlObj[child.type.name];
                if (!baseXmlObj[parentName][groupNode]) {
                    baseXmlObj[parentName][groupNode] = [];
                }
                baseXmlObj[parentName][groupNode].push(childContents);
            }
            return baseXmlObj;
        });
    }
}
/**
 * Creates write infos for any children that haven't been written yet. Children may
 * delay being written in order to find potential existing children to merge
 * with in the conversion pipeline.
 */
class DecompositionFinalizer extends ConvertTransactionFinalizer {
    constructor() {
        super(...arguments);
        this._state = {};
    }
    finalize() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const writerData = [];
            for (const toDecompose of Object.values(this._state)) {
                if (!toDecompose.foundMerge) {
                    writerData.push({
                        component: (_a = toDecompose.origin.parent, (_a !== null && _a !== void 0 ? _a : toDecompose.origin)),
                        writeInfos: [toDecompose.writeInfo],
                    });
                }
            }
            return writerData;
        });
    }
}
/**
 * A state manager over the course of a single metadata conversion call.
 */
class ConvertContext {
    constructor() {
        this.decomposition = new DecompositionFinalizer();
        this.recomposition = new RecompositionFinalizer();
    }
    executeFinalizers() {
        return __asyncGenerator(this, arguments, function* executeFinalizers_1() {
            for (const member of Object.values(this)) {
                if (member instanceof ConvertTransactionFinalizer) {
                    yield yield __await(member.finalize());
                }
            }
        });
    }
}
exports.ConvertContext = ConvertContext;
//# sourceMappingURL=convertContext.js.map