/// <reference types="node" />
import { VirtualDirectory, TreeContainer } from '../metadata-registry';
import { SourcePath } from '../common';
import { Readable } from 'stream';
/**
 * An extendable base class for implementing the `TreeContainer` interface
 */
export declare abstract class BaseTreeContainer implements TreeContainer {
    find(fileType: 'content' | 'metadata', fullName: string, dir: SourcePath): SourcePath | undefined;
    abstract exists(fsPath: SourcePath): boolean;
    abstract isDirectory(fsPath: SourcePath): boolean;
    abstract readDirectory(fsPath: SourcePath): string[];
    abstract readFile(fsPath: SourcePath): Promise<Buffer>;
    abstract stream(fsPath: SourcePath): Readable;
}
export declare class NodeFSTreeContainer extends BaseTreeContainer {
    isDirectory(fsPath: SourcePath): boolean;
    exists(fsPath: SourcePath): boolean;
    readDirectory(fsPath: SourcePath): string[];
    readFile(fsPath: SourcePath): Promise<Buffer>;
    stream(fsPath: SourcePath): Readable;
}
export declare class ZipTreeContainer extends BaseTreeContainer {
    private tree;
    private constructor();
    static create(buffer: Buffer): Promise<ZipTreeContainer>;
    exists(fsPath: string): boolean;
    isDirectory(fsPath: string): boolean;
    readDirectory(fsPath: string): string[];
    readFile(fsPath: string): Promise<Buffer>;
    stream(fsPath: string): Readable;
    private populate;
    private ensureDirPathExists;
}
export declare class VirtualTreeContainer extends BaseTreeContainer {
    private tree;
    private fileContents;
    constructor(virtualFs: VirtualDirectory[]);
    isDirectory(fsPath: string): boolean;
    exists(fsPath: string): boolean;
    readDirectory(fsPath: string): string[];
    readFile(fsPath: SourcePath): Promise<Buffer>;
    stream(fsPath: string): Readable;
    private populate;
}
