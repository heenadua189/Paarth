"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const fast_xml_parser_1 = require("fast-xml-parser");
const forceIgnore_1 = require("./forceIgnore");
const registry_1 = require("../utils/registry");
const utils_1 = require("../utils");
const treeContainers_1 = require("./treeContainers");
const common_1 = require("../common");
const path_2 = require("../utils/path");
/**
 * Representation of a MetadataComponent in a file tree.
 */
class SourceComponent {
    constructor(props, tree = new treeContainers_1.NodeFSTreeContainer(), forceIgnore = new forceIgnore_1.ForceIgnore()) {
        this.name = props.name;
        this.type = props.type;
        this.xml = props.xml;
        this.parent = props.parent;
        this.content = props.content;
        this._tree = tree;
        this.forceIgnore = forceIgnore;
    }
    static createVirtualComponent(props, fs, forceIgnore) {
        const tree = new treeContainers_1.VirtualTreeContainer(fs);
        return new SourceComponent(props, tree, forceIgnore);
    }
    walkContent() {
        const sources = [];
        if (this.content) {
            for (const fsPath of this.walk(this.content)) {
                if (fsPath !== this.xml) {
                    sources.push(fsPath);
                }
            }
        }
        return sources;
    }
    getChildren() {
        return this.content && !this.parent && this.type.children
            ? this.getChildrenInternal(this.content)
            : [];
    }
    parseXml() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.xml) {
                const contents = yield this.tree.readFile(this.xml);
                return fast_xml_parser_1.parse(contents.toString(), { ignoreAttributes: false });
            }
            return {};
        });
    }
    getPackageRelativePath(fsPath, format) {
        const { directoryName, suffix, inFolder } = this.type;
        // if there isn't a suffix, assume this is a mixed content component that must
        // reside in the directoryName of its type. trimUntil maintains the folder structure
        // the file resides in for the new destination.
        let relativePath;
        if (!suffix) {
            relativePath = path_2.trimUntil(fsPath, directoryName);
        }
        else if (inFolder) {
            const folderName = this.fullName.split('/')[0];
            relativePath = path_1.join(directoryName, folderName, path_1.basename(fsPath));
        }
        else {
            relativePath = path_1.join(directoryName, path_1.basename(fsPath));
        }
        if (format === 'source') {
            return path_1.join(common_1.DEFAULT_PACKAGE_ROOT_SFDX, relativePath);
        }
        return relativePath;
    }
    getChildrenInternal(dirPath) {
        var _a;
        const children = [];
        for (const fsPath of this.walk(dirPath)) {
            const childXml = registry_1.parseMetadataXml(fsPath);
            const fileIsRootXml = ((_a = childXml) === null || _a === void 0 ? void 0 : _a.suffix) === this.type.suffix;
            if (childXml && !fileIsRootXml) {
                // TODO: Log warning if missing child type definition
                const childTypeId = this.type.children.suffixes[childXml.suffix];
                const childComponent = new SourceComponent({
                    name: utils_1.baseName(fsPath),
                    type: this.type.children.types[childTypeId],
                    xml: fsPath,
                    parent: this,
                }, this._tree, this.forceIgnore);
                children.push(childComponent);
            }
        }
        return children;
    }
    *walk(fsPath) {
        if (!this._tree.isDirectory(fsPath)) {
            yield fsPath;
        }
        else {
            for (const child of this._tree.readDirectory(fsPath)) {
                const childPath = path_1.join(fsPath, child);
                if (this.forceIgnore.denies(childPath)) {
                    continue;
                }
                else if (this._tree.isDirectory(childPath)) {
                    yield* this.walk(childPath);
                }
                else {
                    yield childPath;
                }
            }
        }
    }
    get fullName() {
        return `${this.parent ? `${this.parent.fullName}.` : ''}${this.name}`;
    }
    get tree() {
        return this._tree;
    }
}
exports.SourceComponent = SourceComponent;
//# sourceMappingURL=sourceComponent.js.map