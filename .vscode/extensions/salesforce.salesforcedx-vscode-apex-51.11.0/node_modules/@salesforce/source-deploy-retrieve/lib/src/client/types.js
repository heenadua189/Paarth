"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const metadata_registry_1 = require("../metadata-registry");
/**
 * Status of component during a deployment.
 */
var ComponentStatus;
(function (ComponentStatus) {
    ComponentStatus["Created"] = "Created";
    ComponentStatus["Changed"] = "Changed";
    ComponentStatus["Unchanged"] = "Unchanged";
    ComponentStatus["Deleted"] = "Deleted";
    ComponentStatus["Failed"] = "Failed";
})(ComponentStatus = exports.ComponentStatus || (exports.ComponentStatus = {}));
/**
 * Possible statuses of a metadata deploy operation.
 */
var DeployStatus;
(function (DeployStatus) {
    DeployStatus["Pending"] = "Pending";
    DeployStatus["InProgress"] = "InProgress";
    DeployStatus["Succeeded"] = "Succeeded";
    DeployStatus["SucceededPartial"] = "SucceededPartial";
    DeployStatus["Failed"] = "Failed";
    DeployStatus["Canceling"] = "Canceling";
    DeployStatus["Canceled"] = "Canceled";
})(DeployStatus = exports.DeployStatus || (exports.DeployStatus = {}));
var RetrieveStatus;
(function (RetrieveStatus) {
    RetrieveStatus["Pending"] = "Pending";
    RetrieveStatus["InProgress"] = "InProgress";
    RetrieveStatus["Succeeded"] = "Succeeded";
    RetrieveStatus["PartialSuccess"] = "PartialSuccess";
    RetrieveStatus["Failed"] = "Failed";
})(RetrieveStatus = exports.RetrieveStatus || (exports.RetrieveStatus = {}));
var ManageableState;
(function (ManageableState) {
    ManageableState["Beta"] = "beta";
    ManageableState["Deleted"] = "deleted";
    ManageableState["Deprecated"] = "deprecated";
    ManageableState["DeprecatedEditable"] = "deprecatedEditable";
    ManageableState["Installed"] = "installed";
    ManageableState["InstalledEditable"] = "installedEditable";
    ManageableState["Released"] = "released";
    ManageableState["Unmanaged"] = "unmanaged";
})(ManageableState || (ManageableState = {}));
var ToolingDeployStatus;
(function (ToolingDeployStatus) {
    // ContainerAsyncRequest states
    ToolingDeployStatus["Queued"] = "Queued";
    ToolingDeployStatus["Invalidated"] = "Invalidated";
    ToolingDeployStatus["Error"] = "Error";
    ToolingDeployStatus["Aborted"] = "Aborted";
    // Shared
    ToolingDeployStatus["Completed"] = "Completed";
    ToolingDeployStatus["Failed"] = "Failed";
    // unique to bundle requests
    ToolingDeployStatus["CompletedPartial"] = "CompletedPartial";
})(ToolingDeployStatus = exports.ToolingDeployStatus || (exports.ToolingDeployStatus = {}));
class BaseApi {
    constructor(connection, resolver, registry = new metadata_registry_1.RegistryAccess()) {
        this.connection = connection;
        this.resolver = resolver;
        this.registry = registry;
    }
}
exports.BaseApi = BaseApi;
//# sourceMappingURL=types.js.map