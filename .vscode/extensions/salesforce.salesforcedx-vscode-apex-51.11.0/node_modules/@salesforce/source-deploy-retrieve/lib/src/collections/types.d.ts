import { ComponentLike } from '../common';
import { RegistryAccess, TreeContainer } from '../metadata-registry';
import { ComponentSet } from './componentSet';
export interface PackageTypeMembers {
    name: string;
    members: string[];
}
export interface PackageManifestObject {
    Package: {
        types: PackageTypeMembers[];
        version: string;
    };
}
interface ComponentSetOptions {
    registry?: RegistryAccess;
}
export interface FromSourceOptions extends ComponentSetOptions {
    filter?: Iterable<ComponentLike> | ComponentSet;
    tree?: TreeContainer;
}
export interface FromManifestOptions extends FromSourceOptions {
    resolve?: Iterable<string>;
    literalWildcard?: boolean;
}
export declare type ResolveOptions = Omit<FromSourceOptions, 'registry'>;
export {};
