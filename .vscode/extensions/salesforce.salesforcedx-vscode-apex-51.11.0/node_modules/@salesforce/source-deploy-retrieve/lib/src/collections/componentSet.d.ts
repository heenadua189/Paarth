import { Connection } from '@salesforce/core';
import { MetadataDeployOptions, SourceDeployResult, SourceRetrieveResult } from '../client/types';
import { MetadataComponent } from '../common';
import { RegistryAccess, SourceComponent } from '../metadata-registry';
import { FromSourceOptions, FromManifestOptions, PackageManifestObject, ResolveOptions } from './types';
import { ComponentLike } from '../common/types';
export declare class ComponentSet implements Iterable<MetadataComponent> {
    private static readonly WILDCARD;
    private static readonly KEY_DELIMITER;
    apiVersion: string;
    private registry;
    private components;
    constructor(components?: Iterable<ComponentLike>, registry?: RegistryAccess);
    /**
     * Create a set by resolving components from source.
     *
     * @param fsPath Path to resolve components from
     * @param options
     */
    static fromSource(fsPath: string, options?: FromSourceOptions): ComponentSet;
    /**
     * Create a set by reading a manifest file in xml format. Optionally, specify a file path
     * with the `resolve` option to resolve source files for the components.
     *
     * ```
     * WorkingSet.fromManifestFile('/path/to/package.xml', {
     *  resolve: '/path/to/force-app'
     * });
     * ```
     *
     * @param fsPath Path to xml file
     * @param options
     */
    static fromManifestFile(fsPath: string, options?: FromManifestOptions): Promise<ComponentSet>;
    private static getComponentsFromManifestObject;
    /**
     * Deploy components in the set to an org. The components must be backed by source files.
     * Deploying with a username requires local AuthInfo from @salesforce/core, usually created
     * after authenticating with the Salesforce CLI.
     *
     * @param usernameOrConnection Username or connection to deploy components with.
     * @param options
     */
    deploy(usernameOrConnection: string | Connection, options?: MetadataDeployOptions): Promise<SourceDeployResult>;
    /**
     * Retrieve components in the set from an org. Components are not required to be backed by
     * source files. Retrieving with a username requires local AuthInfo from @salesforce/core,
     * usually created after authenticating with the Salesforce CLI.
     *
     * @param usernameOrConnection Username or Connection to retrieve with.
     * @param output Directory to retrieve to.
     * @param options
     */
    retrieve(usernameOrConnection: string | Connection, output: string, options?: {
        merge?: boolean;
        wait?: number;
    }): Promise<SourceRetrieveResult>;
    /**
     * Get an object representation of a package manifest based on the set components.
     */
    getObject(): PackageManifestObject;
    /**
     * Resolve source backed components and add them to the set.
     *
     * @param fsPath: File path to resolve
     * @param options
     */
    resolveSourceComponents(fsPath: string, options?: ResolveOptions): ComponentSet;
    /**
     * Create a manifest in xml format (package.xml) based on the set components.
     *
     * @param indentation Number of spaces to indent lines by.
     */
    getPackageXml(indentation?: number): string;
    getSourceComponents(forMember?: ComponentLike): IterableIterator<SourceComponent>;
    add(component: ComponentLike): void;
    has(component: ComponentLike): boolean;
    [Symbol.iterator](): Iterator<MetadataComponent>;
    get size(): number;
    private getConnection;
    private sourceKey;
    private simpleKey;
}
